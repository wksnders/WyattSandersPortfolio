@using WyattSandersPortfolio.Models.GameModels
@rendermode InteractiveWebAssembly
<article id="daily-chest" class="daily-chest-page">
    <header>
        <h3 class="header-text weight-mid">--- * ! * DailyChest *  ! * ---</h3>
        <h5 class="subheader-text weight-mid">adventures in procedural generation</h5>
    </header>
    
    @if (isChestOpened)
    {
        <div class="chest-page">
            <div class="chest-img-container">
                <img class="chest-img" src="DailyChestComponents/OpenChest.png" alt="an open magic tresure chest" />
                <div class="chest-img-overlay">
                    <div class="items">
                        <h4 class="body-text">Gold : @todaysChest.gold gp</h4>
                        <h4 class="body-text weight-mid">Items</h4>
                        @foreach (GameItem item in todaysChest.items)
                        {
                            <div class="item-row">
                                @item.Quantity
                                @("\t" + item.Name)
                                @item.GoldValue gp
                            </div>
                        }
                        @if (todaysChest.items.Count == 0)
                        {
                            <div class="item-row"></div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
    else{
        <div class="chest-page" style="visibility:@isChestOpened">
            <div class="chest-img-container">
                <img class="chest-img" src="DailyChestComponents/ClosedChest.png" alt="a closed tresure chest" />
                <div class="chest-img-overlay">
                    <button class="daily-chest-button" @onclick="OpenChest"></button>
                </div>
            </div>
        </div>
    }
    

</article>
@code {
    RandomItemChest todaysChest = DailyRandomChest.GetDailyChest();


    public bool isChestOpened { get; set; } = false;

    public void OpenChest()
    {
        isChestOpened = true;
        InvokeAsync(StateHasChanged);
    }

}
